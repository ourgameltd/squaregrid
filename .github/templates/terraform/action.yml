name: terraform
description: Template - Terraform

inputs:
  environment:
    required: true
  b2c_authority:
    required: true
  b2c_issuer:
    required: true
  b2c_client_id:
    required: true
  apply_changes:
    required: true
    default: false

runs:
  using: "composite"
  steps:
  - name: 'Set up Terraform'
    uses: hashicorp/setup-terraform@v2
    with:
      terraform_version: 1.5.0

  - name: 'Generate tfvars file'
    shell: bash
    working-directory: build/infra
    run: |
      echo 'environment = "${{ inputs.environment }}"' > terraform.tfvars
      echo 'b2c_authority = "${{ inputs.b2c_authority }}"' >> terraform.tfvars
      echo 'b2c_issuer = "${{ inputs.b2c_issuer }}"' >> terraform.tfvars
      echo 'b2c_client_id = "${{ inputs.b2c_client_id }}"' >> terraform.tfvars

  - name: 'TF Config'
    shell: bash
    working-directory: build/infra
    run: |
      cat terraform.tfvars

  - name: 'Terraform Init'
    shell: bash
    working-directory: build/infra
    run: |
      terraform init \
      -reconfigure \
      -backend-config=storage_account_name=terraformogdvtst \
      -backend-config=container_name=state-dev \
      -backend-config=resource_group_name=Landing-Zones-Default \
      -backend-config=subscription_id=$ARM_SUBSCRIPTION_ID \
      -backend-config=tenant_id=$ARM_TENANT_ID \
      -backend-config=client_id=$ARM_CLIENT_ID \
      -backend-config=client_secret=$ARM_CLIENT_SECRET \
      -upgrade

  - name: 'Terraform Plan'
    shell: bash
    working-directory: build/infra
    id: tfplan
    run: terraform plan -var-file=terraform.tfvars -out=tfplan

  - name: 'Terraform Apply'
    shell: bash
    working-directory: build/infra
    if: inputs.apply_changes == 'true'
    run: terraform apply -auto-approve tfplan
